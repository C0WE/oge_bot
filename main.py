
import logging
import aiosqlite
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from aiogram.types import (
    BotCommand
)




logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)


TOKEN = 'TOKEN'


class Form(StatesGroup):
    MAIN_MENU = State()
    VIDEO_SELECTION = State()
    TASK_SELECTION = State()
    ANSWER_INPUT = State()


bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="Markdown"))
dp = Dispatcher()

async def set_main_menu():
    main_menu_commands = [
        BotCommand(command='/start', description='–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'),
        BotCommand(command='/stop', description='–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞'),
    ]
    await bot.set_my_commands(main_menu_commands)







# ========================
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# ========================
def main_menu_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="üé• –í–∏–¥–µ–æ", callback_data="video"),
        types.InlineKeyboardButton(text="üèãÔ∏è –ó–∞–¥–∞–Ω–∏–µ", callback_data="task"),
        types.InlineKeyboardButton(text="üõë –•–≤–∞—Ç–∏—Ç", callback_data="stop")
    )
    builder.adjust(2)
    return builder.as_markup()


# ========================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
# ========================
@dp.message(Command(commands=['start']))
async def start_handler(message: types.Message, state: FSMContext):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.first_name}!\n"
        "–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –û–ì–≠ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard()
    )
    await state.set_state(Form.MAIN_MENU)


@dp.message(Command(commands=['stop']))
async def start_handler(message: types.Message, state: FSMContext):
    await message.answer(
        f"üëã –í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ, {message.from_user.first_name}!",
    )
    await state.clear()



# ========================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤
# ========================
@dp.callback_query(F.data == "video", Form.MAIN_MENU)
async def video_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ:")
    await state.set_state(Form.VIDEO_SELECTION)
    await callback.answer()


@dp.callback_query(F.data == "task", Form.MAIN_MENU)
async def task_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:")
    await state.set_state(Form.TASK_SELECTION)
    await callback.answer()


@dp.callback_query(F.data == "stop", Form.MAIN_MENU)
async def stop_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(f"üëã –í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ, {callback.from_user.first_name}!")
    await state.clear()
    await callback.answer()


# ========================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ –≤–∞—à–∏ —Ç–∞–±–ª–∏—Ü—ã)
# ========================
@dp.message(Form.VIDEO_SELECTION)
async def video_handler(message: types.Message, state: FSMContext):
    try:
        number = int(message.text.strip())
        async with aiosqlite.connect('bot_oge.db') as db:
            async with db.execute(
                    "SELECT name, url_video FROM lessons WHERE id = ?",
                    (number,)
            ) as cursor:
                result = await cursor.fetchone()

        if not result:
            return await message.answer("‚ùå –í–∏–¥–µ–æ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        title, video_url = result
        await message.answer(f"üìπ *{title}*\n{video_url}")

    except ValueError:
        await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 25")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

    await return_to_menu(message, state)


@dp.message(Form.TASK_SELECTION)
async def task_handler(message: types.Message, state: FSMContext):

    try:
        number = int(message.text.strip())

        async with aiosqlite.connect('bot_oge.db') as db:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∑–∞–¥–∞–Ω–∏—è –∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
            async with db.execute(
                    """SELECT example, url_image, answer 
                    FROM examples 
                    WHERE id_example = ? 
                    ORDER BY RANDOM() 
                    LIMIT 1""",
                    (number,)
            ) as cursor:
                result = await cursor.fetchone()




        if not result:
            return await message.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        description, image_url, answer = result
        await state.update_data(correct_answer=answer)

        response_text = f"üìù *–ó–∞–¥–∞–Ω–∏–µ {number}*\n{description}"
        if image_url and image_url.lower() != "–Ω–µ—Ç":
            await message.answer_photo(image_url, caption=response_text)
        else:
            await message.answer(response_text)

        await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç(—ã) —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
        await state.set_state(Form.ANSWER_INPUT)

    except ValueError:
        await message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 25")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
        await return_to_menu(message, state)


@dp.message(Form.ANSWER_INPUT)
async def answer_handler(message: types.Message, state: FSMContext):
    user_answer = ' '.join(message.text.strip().split())
    data = await state.get_data()
    correct_answer = data.get('correct_answer', '')

    if user_answer == correct_answer:
        await message.answer(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Ç–≤–µ—Ç: {correct_answer}")
    else:
        await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")

    await return_to_menu(message, state)


# ========================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ========================
async def return_to_menu(message: types.Message, state: FSMContext):
    await message.answer("üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard())
    await state.set_state(Form.MAIN_MENU)


# ========================
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ========================
async def main():
    await set_main_menu()
    await dp.start_polling(bot)


if __name__ == '__main__':
    import asyncio

    asyncio.run(main())
